# Generated by Django 4.2.4 on 2025-02-26 17:59

import django.contrib.postgres.fields
from django.db import migrations, models
from core.models.ldap_settings import (
	LDAPSetting as LDAPSettingModel
)
from core.models.user import User as UserModel
from interlock_backend.encrypt import (
	aes_encrypt,
	fernet_decrypt,
)

# Generated by Django 4.2.4 on 2024-03-25 17:32

from django.db import migrations

def migrate_crypt_format(obj, PREFIX, OLD_PWD_FIELD=None):
	NEW_PASSWORD_FIELDS = (
		f"{PREFIX}_password_aes",
		f"{PREFIX}_password_ct",
		f"{PREFIX}_password_nonce",
		f"{PREFIX}_password_tag",
	)
	if hasattr(obj, OLD_PWD_FIELD):
		fernet_data = fernet_decrypt(getattr(obj, OLD_PWD_FIELD))
		new_encrypted_data = aes_encrypt(fernet_data)
		for index, field in enumerate(NEW_PASSWORD_FIELDS):
			setattr(obj, field, new_encrypted_data[index])

def migrate_encrypted_credentials(apps, schema_editor):
	LDAPSetting: LDAPSettingModel = apps.get_model('core', 'LDAPSetting')
	User: UserModel = apps.get_model('core', 'User')

	lds_query = LDAPSetting.objects.filter(type="LDAP_AUTH_CONNECTION_PASSWORD")
	user_query = User.objects.exclude({
		"encryptedPassword__isnull": True
	})
	for lds in lds_query:
		lds: LDAPSettingModel
		migrate_crypt_format(lds, "v", "v_password")
	for user in user_query:
		user: UserModel
		migrate_crypt_format(user, "ldap", "encryptedPassword")

class Migration(migrations.Migration):
	dependencies = [
		("core", "0007_alter_ldapsetting_name"),
	]

	operations = [
		migrations.AlterField(
			model_name="ldapsetting",
			name="v_tls",
			field=models.CharField(
				blank=True,
				choices=[
					("PROTOCOL_TLSv1", "TLSv1"),
					("PROTOCOL_TLSv1_1", "TLSv1_1"),
					("PROTOCOL_TLSv1_2", "TLSv1_2"),
					("PROTOCOL_TLSv1_3", "TLSv1_3"),
					("PROTOCOL_TLS", "TLS"),
					("PROTOCOL_TLS_CLIENT", "TLS_CLIENT"),
				],
				null=True,
				verbose_name="param_v_tls",
			),
		),
		migrations.AddField(
			model_name="user",
			name="ldap_groups",
			field=django.contrib.postgres.fields.ArrayField(
				base_field=models.CharField(max_length=512),
				default=list,
				size=None,
				verbose_name="LDAP Groups",
			),
		),
		migrations.AlterModelOptions(
			name="user",
			options={},
		),
		migrations.AddField(
			model_name="ldapsetting",
			name="v_password_aes",
			field=models.BinaryField(blank=True, null=True),
		),
		migrations.AddField(
			model_name="ldapsetting",
			name="v_password_ct",
			field=models.BinaryField(blank=True, null=True),
		),
		migrations.AddField(
			model_name="ldapsetting",
			name="v_password_nonce",
			field=models.BinaryField(blank=True, null=True),
		),
		migrations.AddField(
			model_name="ldapsetting",
			name="v_password_tag",
			field=models.BinaryField(blank=True, null=True),
		),
		migrations.AddField(
			model_name="user",
			name="ldap_password_aes",
			field=models.BinaryField(blank=True, null=True),
		),
		migrations.AddField(
			model_name="user",
			name="ldap_password_ct",
			field=models.BinaryField(blank=True, null=True),
		),
		migrations.AddField(
			model_name="user",
			name="ldap_password_nonce",
			field=models.BinaryField(blank=True, null=True),
		),
		migrations.AddField(
			model_name="user",
			name="ldap_password_tag",
			field=models.BinaryField(blank=True, null=True),
		),
		migrations.AlterField(
			model_name="ldapsetting",
			name="v_string",
			field=models.CharField(
				blank=True, max_length=256, null=True, verbose_name="param_v_string"
			),
		),
		migrations.AddConstraint(
			model_name="user",
			constraint=models.CheckConstraint(
				check=models.Q(
					models.Q(
						("ldap_password_aes", None),
						("ldap_password_ct", None),
						("ldap_password_nonce", None),
						("ldap_password_tag", None),
					),
					models.Q(
						("ldap_password_aes__isnull", False),
						("ldap_password_ct__isnull", False),
						("ldap_password_nonce__isnull", False),
						("ldap_password_tag__isnull", False),
					),
					_connector="OR",
				),
				name="user_password_crypt_data_all_or_none",
			),
		),
		migrations.CreateModel(
			name="InterlockSetting",
			fields=[
				(
					"created_at",
					models.DateTimeField(auto_now_add=True, verbose_name="created at"),
				),
				(
					"modified_at",
					models.DateTimeField(auto_now=True, verbose_name="modified at"),
				),
				(
					"deleted_at",
					models.DateTimeField(
						blank=True, null=True, verbose_name="deleted at"
					),
				),
				("deleted", models.BooleanField(default=False, verbose_name="deleted")),
				("notes", models.TextField(blank=True, null=True)),
				(
					"id",
					models.BigAutoField(
						primary_key=True, serialize=False, verbose_name="id"
					),
				),
				(
					"s_name",
					models.CharField(
						choices=[
							("AES_ENCRYPT_KEY", "ilck_aes_encrypt_key"),
							("FERNET_KEY", "ilck_fernet_key"),
						],
						max_length=128,
						unique=True,
						verbose_name="name",
					),
				),
				(
					"s_type",
					models.CharField(
						choices=[
							("STRING", "String"),
							("BYTES", "AES Encrypted"),
							("BOOL", "Boolean"),
							("INTEGER", "Integer"),
							("FLOAT", "Float"),
						],
						verbose_name="type",
					),
				),
				("s_data_str", models.CharField(blank=True, null=True)),
				("s_data_int", models.IntegerField(blank=True, null=True)),
				("s_data_float", models.FloatField(blank=True, null=True)),
				("s_data_bool", models.BooleanField(blank=True, null=True)),
				("s_data_bytes", models.BinaryField(blank=True, null=True)),
			],
			options={
				"abstract": False,
			},
		),
		migrations.RunPython(migrate_encrypted_credentials),
		migrations.RemoveField(
			model_name="ldapsetting",
			name="v_password",
		),
		migrations.RemoveField(
			model_name="user",
			name="encryptedPassword",
		),
	]
