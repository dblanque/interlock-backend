"""
Django settings for interlock_backend project.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
import uuid
import base64
from django.core.exceptions import ImproperlyConfigured
from datetime import timedelta
from django.core.management.utils import get_random_secret_key
from interlock_backend.utils import load_override
from interlock_backend.server_timezone import get_server_timezone
import mimetypes

mimetypes.add_type("text/css", ".css", True)

################################################################################
###### ! Override settings in interlock_backend/local_django_settings.py ! #####
################################################################################

# A little easter egg for you :)
# from this import d

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

################################################################################
################################# SECRET KEY ###################################
################################################################################
# SECURITY WARNING: keep the secret and fernet keys used in production secret!
SECRET_KEY = None
SECRET_KEY_FALLBACKS = []
# Auto-generate local secret key if it does not exist.
try:
	from interlock_backend.django_key import SECRET_KEY
except ImportError:
	DJANGO_KEY_FILE = os.path.join(
		BASE_DIR, "interlock_backend", "django_key.py"
	)
	SECRET_KEY = get_random_secret_key()
	# Write the file
	with open(DJANGO_KEY_FILE, "w") as file:
		file.write("SECRET_KEY = " + '"' + str(SECRET_KEY) + '"')
if SECRET_KEY is None or len(str(SECRET_KEY)) < 1:
	raise ImproperlyConfigured("Secret Key is invalid (None or len < 1)")

################################################################################
############################# FERNET ENCRYPTION KEY ############################
################################################################################
FERNET_KEY = None
try:
	from interlock_backend.fernet_key import FERNET_KEY
except ImportError:
	FERNET_KEY_FILE = os.path.join(
		BASE_DIR, "interlock_backend", "fernet_key.py"
	)
	FERNET_KEY = base64.urlsafe_b64encode(os.urandom(32))
	# Write the file
	with open(FERNET_KEY_FILE, "w") as file:
		file.write("FERNET_KEY = " + str(FERNET_KEY))
if FERNET_KEY is None or len(str(FERNET_KEY)) < 1:
	raise ImproperlyConfigured("Fernet Key is invalid (None or len < 1)")

# Default Local Admin Credentials
DEFAULT_SUPERUSER_USERNAME = "admin"
DEFAULT_SUPERUSER_PASSWORD = "interlock"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False
load_override(globals(), "DEBUG")

################################################################################
################################# URLs and CORS ################################
################################################################################
FRONT_URL: str = None
URLS: list[str] = []
DEV_URL = "127.0.0.1:3000"
ALLOWED_HOSTS = []
for k in (
	"FRONT_URL",
	"URLS",
	"DEV_URL",
	"ALLOWED_HOSTS",
):
	load_override(globals(), k)

if not FRONT_URL:
	FRONT_URL = DEV_URL
if DEBUG:
	URLS.append(f"http://{DEV_URL}")
	URLS.append(f"https://{DEV_URL}")
if FRONT_URL != DEV_URL:
	URLS.append(f"http://{FRONT_URL}")
	URLS.append(f"https://{FRONT_URL}")

# If you want to restrict to a subnet or host
ALL_HOSTS = ["*"]
CORS_ALLOW_CREDENTIALS = True
if DEBUG:
	## If this is used then `CORS_ORIGIN_WHITELIST` will not have any effect ###
	##################### Allows requests from all origins. ####################
	#################### ! Not recommended for production ! ####################
	CORS_ORIGIN_ALLOW_ALL = True
	ALLOWED_HOSTS = ALL_HOSTS
else:
	# SAFER CORS SETTINGS
	CORS_ORIGIN_ALLOW_ALL = False
	CORS_ALLOWED_ORIGINS = URLS
	CORS_ORIGIN_WHITELIST = URLS
	CORS_ORIGIN_REGEX_WHITELIST = URLS
	for v in (
		"localhost",
		"127.0.0.1",
		FRONT_URL,
	):
		if not v in ALLOWED_HOSTS:
			ALLOWED_HOSTS.append(v)

############################ Reverse Proxy-ing support #########################
# Tell Django to trust the X-Forwarded-Proto header from NGINX
SECURE_PROXY_SSL_HEADER = (
	"HTTP_X_FORWARDED_PROTO",
	"https",
)

################### Force HTTPS in URLs generated by Django ####################
USE_X_FORWARDED_HOST = True  # For correct host/port in URLs
# SECURE_SSL_REDIRECT = True   # Redirect HTTP → HTTPS

################################################################################
############################ Application definition ############################
################################################################################
INTERLOCK_NAMESPACE = uuid.UUID("31a630a1-2dc0-42a5-b8a7-b9d45fbd1406")

INSTALLED_APPS = [
	"sslserver",
	"django_extensions",
	"django.contrib.admin",
	"django.contrib.auth",
	"django_python3_ldap",
	"django.contrib.contenttypes",
	"django.contrib.sessions",
	"django.contrib.messages",
	"django.contrib.staticfiles",
	"django_otp",
	"django_otp.plugins.otp_totp",
	"django_otp.plugins.otp_hotp",
	"django_otp.plugins.otp_static",
	"rest_framework",
	"rest_framework_simplejwt.token_blacklist",
	"corsheaders",
	"core",
	"oidc_provider",
]

MIDDLEWARE = [
	"django.middleware.security.SecurityMiddleware",
	"django.middleware.locale.LocaleMiddleware",
	"django.contrib.sessions.middleware.SessionMiddleware",
	################### ↓ Must be before Common Middleware ↓ ###################
	"interlock_backend.middleware.OpenIDCorsMiddleware",
	"django.middleware.common.CommonMiddleware",
	"django.middleware.csrf.CsrfViewMiddleware",
	############### ↓ Must be before Authentication Middleware ↓ ###############
	"interlock_backend.middleware.AccountStatusMiddleware",  # ←
	"django.contrib.auth.middleware.AuthenticationMiddleware",
	############### ↓ Must be after Authentication Middleware  ↓ ###############
	"django_otp.middleware.OTPMiddleware",  #
	"django.contrib.messages.middleware.MessageMiddleware",
	"django.middleware.clickjacking.XFrameOptionsMiddleware",
	# "oidc_provider.middleware.SessionManagementMiddleware",
]

ROOT_URLCONF = "interlock_backend.urls"
TEMPLATES = [
	{
		"BACKEND": "django.template.backends.django.DjangoTemplates",
		"DIRS": [],
		"APP_DIRS": True,
		"OPTIONS": {
			"context_processors": [
				"django.template.context_processors.debug",
				"django.template.context_processors.request",
				"django.contrib.auth.context_processors.auth",
				"django.contrib.messages.context_processors.messages",
			],
		},
	},
]

WSGI_APPLICATION = "interlock_backend.wsgi.application"

AUTHENTICATION_BACKENDS = (
	"django.contrib.auth.backends.ModelBackend",
	"core.auth.local.EmailAuthBackend",
	"core.auth.ldap.LDAPBackend",
)

AUTH_USER_MODEL = "core.User"

LOG_FILE_FOLDER = f"{BASE_DIR}/logs"
LOG_FILE_PATH = f"{LOG_FILE_FOLDER}/interlock.log"

################################################################################
################################ OPEN ID CONNECT ###############################
################################################################################

LOGIN_URL = "/login"
OIDC_INTERLOCK_LOGIN_COOKIE = "X_REDIRECT_OIDC"
OIDC_INTERLOCK_NEXT_COOKIE = "X_NEXT_OIDC"
OIDC_USERINFO = "core.views.mixins.oidc.userinfo"
OIDC_SKIP_CUSTOM_CONSENT = False
OIDC_SKIP_CONSENT_EXPIRE = timedelta(days=1)
OIDC_EXTRA_SCOPE_CLAIMS = "core.views.mixins.oidc.CustomScopeClaims"

# OIDC TOKEN CONFIG
OIDC_CODE_EXPIRE = 600		# default: 10 mins
OIDC_IDTOKEN_EXPIRE = 600	# default: 10 mins
OIDC_TOKEN_EXPIRE = 3600	# default: 1 hour
OIDC_SESSION_MANAGEMENT_ENABLE = False

################################################################################
#################################### LOGGING ###################################
################################################################################
if not os.path.exists(LOG_FILE_FOLDER):
	os.makedirs(LOG_FILE_FOLDER)

if not os.path.exists(LOG_FILE_PATH):
	LOG_EXISTS = open(LOG_FILE_PATH, "w")
	LOG_EXISTS.close()

if not LOG_FILE_PATH:
	raise ImproperlyConfigured("No LOG_FILE_PATH found.")

# Defaults
LOG_LEVEL = "INFO"
LDAP3_MODULE_LOG_LEVEL = "WARNING"
LDAP_CONNECTOR_LOG_LEVEL = "INFO"
LDAP_DNS_LOG_LEVEL = "WARNING"
PERF_LOGGING_ROUND = 6
AES_RSA_PERF_LOGGING = False
DIRTREE_PERF_LOGGING = False

for k in (
	"LOG_LEVEL",
	"LDAP3_MODULE_LOG_LEVEL",
	"LDAP_CONNECTOR_LOG_LEVEL",
	"LDAP_DNS_LOG_LEVEL",
	"PERF_LOGGING_ROUND",
	"AES_RSA_PERF_LOGGING",
	"DIRTREE_PERF_LOGGING",
):
	load_override(globals(), k)

LOGGING = {
	"version": 1,
	"disable_existing_loggers": False,
	"formatters": {
		"timestamp": {
			"format": "{asctime} [{levelname}] - {message}",
			"style": "{",
		},
	},
	"handlers": {
		"console": {
			"class": "logging.StreamHandler",
		},
		"file": {
			"level": "WARNING",
			"class": "logging.FileHandler",
			"formatter": "timestamp",
			"filename": LOG_FILE_PATH,
		},
	},
	"loggers": {
		"": {
			"handlers": ["console", "file"],
			"level": LOG_LEVEL,
		},
		"django_python3_ldap": {
			"level": LDAP3_MODULE_LOG_LEVEL,
		},
		"core.ldap.connector": {
			"level": LDAP_CONNECTOR_LOG_LEVEL,
		},
		"core.models.dns": {
			"level": LDAP_DNS_LOG_LEVEL,
		},
	},
}

################################################################################
################################## DATABASE ####################################
################################################################################

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
	"default": {
		"ENGINE": "django.db.backends.postgresql",
		"NAME": "interlockdb",
		"USER": "interlockadmin",
		"PASSWORD": "Clave1234",  # Change this password
		"HOST": "127.0.0.1",  # Or an IP Address that your DB is hosted on
		"PORT": "5432",
	},
	"test": {
		"NAME": "test_interlockdb",
	},
}

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
	{
		"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
	},
	{
		"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
	},
	{
		"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
	},
	{
		"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
	},
]

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Set-up Renderer Classes
DEFAULT_RENDERER_CLASSES = ("rest_framework.renderers.JSONRenderer",)
ALLOW_BROWSABLE_API = True if DEBUG else False
load_override(globals(), "ALLOW_BROWSABLE_API")
if ALLOW_BROWSABLE_API:
	DEFAULT_RENDERER_CLASSES = DEFAULT_RENDERER_CLASSES + (
		"rest_framework.renderers.BrowsableAPIRenderer",
	)

# Throttling Options
ENABLE_THROTTLING = True
load_override(globals(), "ENABLE_THROTTLING")

THROTTLE_OPTS = {}
if ENABLE_THROTTLING:
	THROTTLE_OPTS = {
		"DEFAULT_THROTTLE_CLASSES": [
			"rest_framework.throttling.AnonRateThrottle",
			"rest_framework.throttling.UserRateThrottle",
		],
		"DEFAULT_THROTTLE_RATES": {
			"anon": "25/minute",
			"user": "1000/hour",
		},
	}
load_override(globals(), "THROTTLE_OPTS")

REST_FRAMEWORK = {
	"COERCE_DECIMAL_TO_STRING": False,
	"EXCEPTION_HANDLER": "core.system.exceptionhandler.custom_exception_handler",
	"DEFAULT_AUTHENTICATION_CLASSES": (
		"core.views.mixins.auth.CookieJWTAuthentication",
	),
	"DEFAULT_RENDERER_CLASSES": DEFAULT_RENDERER_CLASSES,
	"DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
	"PAGE_SIZE": 10,
	**THROTTLE_OPTS,
}

DATE_INPUT_FORMATS = ["%Y-%m-%d"]

BAD_LOGIN_COOKIE_NAME = "X_BAD_LOGIN_COUNT"

# To override individual keys you may create a dict named OVERRIDES_JWT
# in your local settings file.
SIMPLE_JWT = {
	# Change for development (default is minutes=5)
	"ACCESS_TOKEN_LIFETIME": timedelta(minutes=5),
	"REFRESH_TOKEN_LIFETIME": timedelta(minutes=15),
	"ROTATE_REFRESH_TOKENS": True,
	"BLACKLIST_AFTER_ROTATION": False,
	"UPDATE_LAST_LOGIN": False,
	"ALGORITHM": "HS256",
	"SIGNING_KEY": SECRET_KEY,  # Can be changed into an independent key for JWT
	# in order to make it more modular
	"VERIFYING_KEY": None,
	"AUDIENCE": None,
	"ISSUER": None,
	"JWK_URL": None,
	"LEEWAY": 1,
	############################ AUTH TOKEN COOKIE #############################
	"AUTH_HEADER_NAME": "HTTP_COOKIE",
	"AUTH_HEADER_TYPES": ("Bearer",),
	"AUTH_COOKIE_DOMAIN": None,
	"AUTH_COOKIE_NAME": "access_token",
	"REFRESH_COOKIE_NAME": "refresh_token",
	"AUTH_COOKIE_SECURE": False if DEBUG else True,
	"AUTH_COOKIE_HTTP_ONLY": True,
	# https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#samesitesamesite-value
	"AUTH_COOKIE_SAME_SITE": "strict",
	############################################################################
	"USER_ID_FIELD": "id",
	"USER_ID_CLAIM": "user_id",
	"USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",
	"AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
	"TOKEN_TYPE_CLAIM": "token_type",
	"JTI_CLAIM": "jti",
	"SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
	"SLIDING_TOKEN_LIFETIME": timedelta(minutes=5),
	"SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),
}
try:
	from interlock_backend.local_django_settings import OVERRIDES_JWT
	for k in OVERRIDES_JWT:
		SIMPLE_JWT[k] = OVERRIDES_JWT[k]
except ImportError:
	pass

############################# Internationalization #############################
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

# Get current System Olson Timezone
TIME_ZONE = get_server_timezone()
USE_I18N = True
USE_TZ = True

################################# Static Files #################################
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "/static/"

################################################################################

try:
	from interlock_backend.local_django_settings import *
except ImportError:
	pass
